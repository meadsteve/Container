<?php
namespace MeadSteve\Container;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-28 at 09:52:51.
 */

include_once __DIR__ . "/bootstrap.php";

class ContainerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Container
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Container();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers MeadSteve\Container\Container::Register
     */
    public function testRegisterWithObject()
    {
		$SpyObject = $this->getMock(
			'MeadSteve\Container\Container',
			array('RegisterItem')
		);

		$Name = "TestCallback";
		$ExpectedObject = new \stdClass();

		$SpyObject->expects($this->once())
			->method('RegisterItem')
			->with($Name, $ExpectedObject);
		$SpyObject->Register($Name, $ExpectedObject);
    }

	/**
     * @covers MeadSteve\Container\Container::Register
     */
    public function testRegisterWithCallback()
    {
        $SpyObject = $this->getMock(
			'MeadSteve\Container\Container',
			array('RegisterCallback')
		);

		$Name = "TestCallback";
		$ExpectedObject = new \stdClass();
		$Callback = function() use ($ExpectedObject) {
			return $ExpectedObject;
		};

		$SpyObject->expects($this->once())
			->method('RegisterCallback')
			->with($Name, $Callback);
		$SpyObject->Register($Name, $Callback);
    }

    /**
     * @covers MeadSteve\Container\Container::GetResource
	 * @covers MeadSteve\Container\Container::Register
     */
    public function testGetResourceFromSimpleCallback()
    {
        $ExpectedObject = new \stdClass();
        $this->object->Register('TestCallback', function() use ($ExpectedObject) {
			return $ExpectedObject;
		});
		$RetrievedObject = $this->object->GetResource('TestCallback');
		assertThat($RetrievedObject, is(identicalTo($ExpectedObject)));
    }

	 /**
     * @covers MeadSteve\Container\Container::GetResource
	 * @covers MeadSteve\Container\Container::Register
     */
    public function testGetResourceFromComplexCallback()
    {
        $ExpectedObject = new \stdClass();
		$IntermediateBuilder = function() use ($ExpectedObject) {
			return $ExpectedObject;
		};
		$this->object->Register('IntermediateBuilder', $IntermediateBuilder);

        $this->object->Register('TestCallback', function(Container $Cont) {
			return $Cont->GetResource('IntermediateBuilder');
		});

		$RetrievedObject = $this->object->GetResource('TestCallback');
		assertThat($RetrievedObject, is(identicalTo($ExpectedObject)));
    }

	/**
     * @covers MeadSteve\Container\Container::GetResource
	 * @covers MeadSteve\Container\Container::Register
	 * @expectedException \OutOfRangeException
     */
    public function testGetResourceFromCallbackThrowsEx()
    {
        $this->object->Register('TestCallback', function(Container $Cont) {
			return $Cont->GetResource('NonRegisteredItem');
		});

		$RetrievedObject = $this->object->GetResource('TestCallback');
    }

	/**
     * @covers MeadSteve\Container\Container::GetResource
	 * @covers MeadSteve\Container\Container::Register
	 * @expectedException \RuntimeException
     */
    public function testRegisterWhenLockedThrowsEx()
    {
		$this->object->Lock();
        $this->object->Register('NewThing',"Test");
    }

	/**
     * @covers MeadSteve\Container\Container::GetResource
	 * @covers MeadSteve\Container\Container::Register
     */
    public function testGetResourceFromObject()
    {
		$ExpectedObject = new \stdClass();
        $this->object->Register('TestResource', $ExpectedObject);
		$RetrievedObject = $this->object->GetResource('TestResource');
		assertThat($RetrievedObject, is(identicalTo($ExpectedObject)));
    }

	 /**
     * @covers MeadSteve\Container\Container::GetResource
	 * @covers MeadSteve\Container\Container::Register
	 * @covers MeadSteve\Container\Container::UnsetResource
     */
    public function testGetResourceFromOverwritten()
    {
		$NotExpectedObject = "Banana";
		$this->object->Register('TestResource', $NotExpectedObject);
        $this->object->Register('TestResource', function() use ($NotExpectedObject) {
			return $NotExpectedObject;
		});

		$ExpectedObject = new \stdClass();
		$this->object->Register('TestResource', $ExpectedObject);

		$RetrievedObject = $this->object->GetResource('TestResource');
		assertThat($RetrievedObject, is(not($NotExpectedObject)));
		assertThat($RetrievedObject, is(identicalTo($ExpectedObject)));
    }

	/**
	 * @covers MeadSteve\Container\Container::GetResource
	 * @covers MeadSteve\Container\Container::Register
	 * @covers MeadSteve\Container\Container::__set
	 * @covers MeadSteve\Container\Container::__get
	 */
	public function testSetGetProperty() {
		$ExpectedObject = new \stdClass();
		$this->object->TestProperty = $ExpectedObject;
		$RetrievedObject = $this->object->TestProperty;
		assertThat($RetrievedObject, is(identicalTo($ExpectedObject)));
	}

		/**
	 * @covers MeadSteve\Container\Container::GetResource
	 * @covers MeadSteve\Container\Container::Register
	 * @covers MeadSteve\Container\Container::__set
	 * @covers MeadSteve\Container\Container::__get
	 */
	public function testSetGetPropertyWithinCallback() {
		$ExpectedObject = new \stdClass();
		$this->object->TestProperty = $ExpectedObject;

		$this->object->Intermediate = function(Container $Cont) {
			return $Cont->TestProperty;
		};

		$RetrievedObject = $this->object->Intermediate;
		assertThat($RetrievedObject, is(identicalTo($ExpectedObject)));
	}
}
